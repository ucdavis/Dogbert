@model ProjectViewModel

@{
	ViewBag.Title = "Create";

}

@section SubNav
{
	<ul class="navigation">
		<li>@Html.ActionLink("Back to List", "Index")</li>
	</ul>
}

@section AdditionalScripts
{
    <script type="text/javascript">
        $(function () {
            $("#slider-complexity").slider({
                min: 0, max: 10,
                slide: function (event, ui) {
                    $("#Project_Complexity").val(ui.value);
                }
            });
        });
    </script>
}

@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
    <fieldset>
    @* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
    Example: Dinosaur 1  *@
	    <legend>Project</legend>
	    @*<h4>Form Header</h4>*@
	    @*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
	    <p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>
	    <ul>

            <li><div class="editor-label required">Workgroup<span>*</span></div>
                <div class="editor-field">
                    @this.Select("Workgroup").Options(Model.Workgroups, x=>x.Id, x=>x.Name).FirstOption("--Select Workgroup--").Selected(Model.Workgroup != null ? Model.Workgroup.Id.ToString() : string.Empty)
                    @Html.ValidationMessage("Workgroup")
                </div>
            </li>

		    <li>
			    <div class="editor-label required">
				    @Html.LabelFor(model => model.Project.Name)<span>*</span> 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.Name)
				    @Html.ValidationMessageFor(model => model.Project.Name)
			    </div>
		    </li>

            <li>
			    <div class="editor-label required">
				    @Html.LabelFor(model => model.Project.ProjectType)<span>*</span> 
			    </div>
			    <div class="editor-field">
                    @this.Select("Project.ProjectType").Options(Model.ProjectTypes,x=>x.Id,x=>x.Name).FirstOption("--Select Project Type--").Selected(Model.Project.ProjectType != null ? Model.Project.ProjectType.Id.ToString() : string.Empty)
				    @Html.ValidationMessageFor(model => model.Project.ProjectType)
			    </div>
		    </li>

            <li>
			    <div class="editor-label required">
				    @Html.LabelFor(model => model.Project.StatusCode)<span>*</span> 
			    </div>
			    <div class="editor-field">
                    @this.Select("Project.StatusCode").Options(Model.StatusCodes,x=>x.Id,x=>x.Name).FirstOption("--Select Status--").Selected(Model.Project.StatusCode != null ? Model.Project.StatusCode.Id.ToString() : string.Empty)
				    @Html.ValidationMessageFor(model => model.Project.StatusCode)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.Priority) 
			    </div>
			    <div class="editor-field">
                    @this.Select("Project.Priority").Options(Model.PriorityTypes, x=>x.Id, x=>x.Name).FirstOption("--Select Priority--").Selected(Model.Project.Priority != null ? Model.Project.Priority.Id.ToString() : string.Empty)
				    @Html.ValidationMessageFor(model => model.Project.Priority)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.Complexity) 
			    </div>
			    <div class="editor-field">
                    <div id="slider-complexity"></div>
                    @Html.HiddenFor(model=>model.Project.Complexity)
				    @Html.ValidationMessageFor(model => model.Project.Complexity)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.Deadline) 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.Deadline)
				    @Html.ValidationMessageFor(model => model.Project.Deadline)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.ProjectedBegin) 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.ProjectedBegin)
				    @Html.ValidationMessageFor(model => model.Project.ProjectedBegin)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.ProjectedEnd) 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.ProjectedEnd)
				    @Html.ValidationMessageFor(model => model.Project.ProjectedEnd)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label required">
				    @Html.LabelFor(model => model.Project.Contact)<span>*</span> 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.Contact)
				    @Html.ValidationMessageFor(model => model.Project.Contact)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.ContactEmail) 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.ContactEmail)
				    @Html.ValidationMessageFor(model => model.Project.ContactEmail)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label required">
				    @Html.LabelFor(model => model.Project.Unit)<span>*</span> 
			    </div>
			    <div class="editor-field">
				    @Html.EditorFor(model => model.Project.Unit)
				    @Html.ValidationMessageFor(model => model.Project.Unit)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.ProjectManager) 
			    </div>
			    <div class="editor-field">
                    @this.Select("Project.ProjectManager").Options(Model.Workers, x=>x.Id, x=>x.FullName).FirstOption("-- Select Worker --").Selected(Model.Project.ProjectManager != null ? Model.Project.ProjectManager.Id.ToString() : string.Empty)
				    @Html.ValidationMessageFor(model => model.Project.ProjectManager)
			    </div>
		    </li>

		    <li>
			    <div class="editor-label">
				    @Html.LabelFor(model => model.Project.LeadProgrammer) 
			    </div>
			    <div class="editor-field">
                    @this.Select("Project.LeadProgrammer").Options(Model.Workers, x => x.Id, x => x.FullName).FirstOption("-- Select Worker --").Selected(Model.Project.LeadProgrammer != null ? Model.Project.LeadProgrammer.Id.ToString() : string.Empty)
				    @Html.ValidationMessageFor(model => model.Project.LeadProgrammer)
			    </div>
		    </li>

		    <li>
			    @* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
			    <div class="editor-label">&nbsp;</div>
			    <div class="editor-field">
			    <input class="button" type="submit" value="Create" /> | @Html.ActionLink("Cancel", "Index")
			    </div>
		    </li>
	    </ul>
    </fieldset>
}




